{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "PhyloSpec Functions Schema",
  "description": "Machine-readable definitions of the PhyloSpec function signatures",
  "version": "1.0.0",
  
  "substitutionModelFunctions": [
    {
      "name": "JC69",
      "description": "Jukes-Cantor model (equal rates)",
      "parameters": [],
      "returnType": "QMatrix"
    },
    {
      "name": "K80",
      "description": "Kimura 2-parameter model",
      "parameters": [
        {
          "name": "kappa",
          "type": "PositiveReal",
          "description": "Transition/transversion ratio",
          "required": true,
          "default": 2.0
        }
      ],
      "returnType": "QMatrix"
    },
    {
      "name": "F81",
      "description": "Felsenstein 81 model",
      "parameters": [
        {
          "name": "baseFrequencies",
          "type": "Simplex",
          "description": "Nucleotide frequencies",
          "required": true,
          "default": [0.25, 0.25, 0.25, 0.25]
        }
      ],
      "returnType": "QMatrix"
    },
    {
      "name": "HKY",
      "description": "Hasegawa-Kishino-Yano model",
      "parameters": [
        {
          "name": "kappa",
          "type": "PositiveReal",
          "description": "Transition/transversion ratio",
          "required": true,
          "default": 2.0
        },
        {
          "name": "baseFrequencies",
          "type": "Simplex",
          "description": "Nucleotide frequencies",
          "required": true,
          "default": [0.25, 0.25, 0.25, 0.25]
        }
      ],
      "returnType": "QMatrix"
    },
    {
      "name": "GTR",
      "description": "General Time-Reversible model",
      "parameters": [
        {
          "name": "rateMatrix",
          "type": {"type": "Vector", "params": ["PositiveReal"]},
          "description": "Relative rate parameters",
          "required": true,
          "default": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
        },
        {
          "name": "baseFrequencies",
          "type": "Simplex",
          "description": "Nucleotide frequencies",
          "required": true,
          "default": [0.25, 0.25, 0.25, 0.25]
        }
      ],
      "returnType": "QMatrix",
      "constraints": [
        {
          "type": "Length",
          "parameter": "rateMatrix",
          "value": 6
        }
      ]
    },
    {
      "name": "WAG",
      "description": "Whelan And Goldman model",
      "parameters": [
        {
          "name": "freqsModel",
          "type": "Boolean",
          "description": "Use frequencies from the model",
          "required": false,
          "default": true
        }
      ],
      "returnType": "QMatrix"
    },
    {
      "name": "JTT",
      "description": "Jones-Taylor-Thornton model",
      "parameters": [
        {
          "name": "freqsModel",
          "type": "Boolean",
          "description": "Use frequencies from the model",
          "required": false,
          "default": true
        }
      ],
      "returnType": "QMatrix"
    },
    {
      "name": "LG",
      "description": "Le-Gascuel model",
      "parameters": [
        {
          "name": "freqsModel",
          "type": "Boolean",
          "description": "Use frequencies from the model",
          "required": false,
          "default": true
        }
      ],
      "returnType": "QMatrix"
    },
    {
      "name": "GY94",
      "description": "Goldman-Yang 1994 model",
      "parameters": [
        {
          "name": "omega",
          "type": "PositiveReal",
          "description": "dN/dS ratio",
          "required": true,
          "default": 1.0
        },
        {
          "name": "kappa",
          "type": "PositiveReal",
          "description": "Transition/transversion ratio",
          "required": true,
          "default": 2.0
        },
        {
          "name": "codonFrequencies",
          "type": "Simplex",
          "description": "Codon frequencies",
          "required": true
        }
      ],
      "returnType": "QMatrix"
    }
  ],
  
  "rateHeterogeneityFunctions": [
    {
      "name": "DiscreteGamma",
      "description": "Discrete gamma-distributed rates across sites",
      "parameters": [
        {
          "name": "shape",
          "type": "PositiveReal",
          "description": "Shape parameter",
          "required": true,
          "default": 1.0
        },
        {
          "name": "categories",
          "type": "PosInteger",
          "description": "Number of discrete categories",
          "required": true,
          "default": 4
        }
      ],
      "returnType": {"type": "Vector", "params": ["PositiveReal"]},
      "constraints": [
        {
          "type": "GreaterThan",
          "parameter": "categories",
          "value": 0
        }
      ]
    },
    {
      "name": "FreeRates",
      "description": "Freely varying rate categories",
      "parameters": [
        {
          "name": "rates",
          "type": {"type": "Vector", "params": ["PositiveReal"]},
          "description": "Rate values",
          "required": true
        },
        {
          "name": "weights",
          "type": "Simplex",
          "description": "Weights for each rate",
          "required": true
        }
      ],
      "returnType": {"type": "Vector", "params": ["PositiveReal"]},
      "constraints": [
        {
          "type": "DimensionsMatch",
          "parameters": ["rates", "weights"]
        }
      ]
    },
    {
      "name": "InvariantSites",
      "description": "Proportion of invariant sites",
      "parameters": [
        {
          "name": "proportion",
          "type": "Probability",
          "description": "Proportion of invariant sites",
          "required": true,
          "default": 0.0
        }
      ],
      "returnType": {"type": "Vector", "params": ["Real"]}
    },
    {
      "name": "StrictClock",
      "description": "Strict molecular clock for branches",
      "parameters": [
        {
          "name": "rate",
          "type": "PositiveReal",
          "description": "Clock rate",
          "required": true,
          "default": 1.0
        }
      ],
      "returnType": {"type": "Vector", "params": ["PositiveReal"]}
    },
    {
      "name": "UncorrelatedLognormal",
      "description": "UCLN clock model for branch rates",
      "parameters": [
        {
          "name": "mean",
          "type": "Real",
          "description": "Mean in log space",
          "required": true,
          "default": 0.0
        },
        {
          "name": "stdev",
          "type": "PositiveReal",
          "description": "Standard deviation",
          "required": true,
          "default": 0.5
        }
      ],
      "returnType": {"type": "Vector", "params": ["PositiveReal"]}
    },
    {
      "name": "UncorrelatedExponential",
      "description": "UCED clock model for branch rates",
      "parameters": [
        {
          "name": "mean",
          "type": "PositiveReal",
          "description": "Mean rate",
          "required": true,
          "default": 1.0
        }
      ],
      "returnType": {"type": "Vector", "params": ["PositiveReal"]}
    }
  ],
  
  "treeFunctions": [
    {
      "name": "mrca",
      "description": "Find most recent common ancestor of taxa",
      "parameters": [
        {
          "name": "tree",
          "type": "Tree",
          "description": "Phylogenetic tree",
          "required": true
        },
        {
          "name": "taxa",
          "type": "TaxonSet",
          "description": "Set of taxa",
          "required": true
        }
      ],
      "returnType": "TreeNode",
      "constraints": [
        {
          "type": "TaxaInTree",
          "parameters": ["taxa", "tree"]
        }
      ]
    },
    {
      "name": "treeHeight",
      "description": "Get height/depth of a tree",
      "parameters": [
        {
          "name": "tree",
          "type": "Tree",
          "description": "Phylogenetic tree",
          "required": true
        }
      ],
      "returnType": "Real"
    },
    {
      "name": "nodeAge",
      "description": "Get age of a node in the tree",
      "parameters": [
        {
          "name": "tree",
          "type": "TimeTree",
          "description": "Time-calibrated tree",
          "required": true
        },
        {
          "name": "node",
          "type": "TreeNode",
          "description": "Node in the tree",
          "required": true
        }
      ],
      "returnType": "Real",
      "constraints": [
        {
          "type": "NodeInTree",
          "parameters": ["node", "tree"]
        }
      ]
    },
    {
      "name": "branchLength",
      "description": "Get length of branch leading to node",
      "parameters": [
        {
          "name": "tree",
          "type": "Tree",
          "description": "Phylogenetic tree",
          "required": true
        },
        {
          "name": "node",
          "type": "TreeNode",
          "description": "Node in the tree",
          "required": true
        }
      ],
      "returnType": "Real",
      "constraints": [
        {
          "type": "NodeInTree",
          "parameters": ["node", "tree"]
        },
        {
          "type": "NotRoot",
          "parameter": "node"
        }
      ]
    },
    {
      "name": "distanceMatrix",
      "description": "Compute pairwise distances from tree",
      "parameters": [
        {
          "name": "tree",
          "type": "Tree",
          "description": "Phylogenetic tree",
          "required": true
        }
      ],
      "returnType": {"type": "Matrix", "params": ["Real"]}
    },
    {
      "name": "descendantTaxa",
      "description": "Get all taxa descended from a node",
      "parameters": [
        {
          "name": "tree",
          "type": "Tree",
          "description": "Phylogenetic tree",
          "required": true
        },
        {
          "name": "node",
          "type": "TreeNode",
          "description": "Node in the tree",
          "required": true
        }
      ],
      "returnType": "TaxonSet",
      "constraints": [
        {
          "type": "NodeInTree",
          "parameters": ["node", "tree"]
        }
      ]
    }
  ],
  
  "mathematicalFunctions": [
    {
      "name": "vectorElement",
      "description": "Extract an element from a vector",
      "typeParams": ["T"],
      "parameters": [
        {
          "name": "vector",
          "type": {"type": "Vector", "params": ["T"]},
          "description": "Source vector",
          "required": true
        },
        {
          "name": "index",
          "type": "Integer",
          "description": "Index to extract",
          "required": true
        }
      ],
      "returnType": "T",
      "constraints": [
        {
          "type": "IndexInBounds",
          "parameters": ["index", "vector"]
        }
      ]
    },
    {
      "name": "matrixElement",
      "description": "Extract an element from a matrix",
      "typeParams": ["T"],
      "parameters": [
        {
          "name": "matrix",
          "type": {"type": "Matrix", "params": ["T"]},
          "description": "Source matrix",
          "required": true
        },
        {
          "name": "row",
          "type": "Integer",
          "description": "Row index",
          "required": true
        },
        {
          "name": "col",
          "type": "Integer",
          "description": "Column index",
          "required": true
        }
      ],
      "returnType": "T",
      "constraints": [
        {
          "type": "RowInBounds",
          "parameters": ["row", "matrix"]
        },
        {
          "type": "ColInBounds",
          "parameters": ["col", "matrix"]
        }
      ]
    },
    {
      "name": "scale",
      "description": "Scale all elements of a vector by a factor",
      "parameters": [
        {
          "name": "vector",
          "type": {"type": "Vector", "params": ["Real"]},
          "description": "Source vector",
          "required": true
        },
        {
          "name": "factor",
          "type": "Real",
          "description": "Scaling factor",
          "required": true
        }
      ],
      "returnType": {"type": "Vector", "params": ["Real"]}
    },
    {
      "name": "normalize",
      "description": "Normalize a vector to sum to 1.0",
      "parameters": [
        {
          "name": "vector",
          "type": {"type": "Vector", "params": ["Real"]},
          "description": "Source vector",
          "required": true
        }
      ],
      "returnType": "Simplex",
      "constraints": [
        {
          "type": "AllNonNegative",
          "parameter": "vector"
        }
      ]
    },
    {
      "name": "log",
      "description": "Natural logarithm",
      "parameters": [
        {
          "name": "x",
          "type": "PositiveReal",
          "description": "Input value",
          "required": true
        }
      ],
      "returnType": "Real"
    },
    {
      "name": "exp",
      "description": "Exponential function",
      "parameters": [
        {
          "name": "x",
          "type": "Real",
          "description": "Input value",
          "required": true
        }
      ],
      "returnType": "PositiveReal"
    },
    {
      "name": "sum",
      "description": "Sum all elements in a vector",
      "parameters": [
        {
          "name": "vector",
          "type": {"type": "Vector", "params": ["Real"]},
          "description": "Source vector",
          "required": true
        }
      ],
      "returnType": "Real"
    },
    {
      "name": "product",
      "description": "Multiply all elements in a vector",
      "parameters": [
        {
          "name": "vector",
          "type": {"type": "Vector", "params": ["Real"]},
          "description": "Source vector",
          "required": true
        }
      ],
      "returnType": "Real"
    }
  ]
}
