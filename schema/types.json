{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "PhyloSpec Types Schema",
  "description": "Machine-readable definitions of the PhyloSpec type system",
  "version": "1.0.0",
  
  "primitiveTypes": [
    {
      "name": "Real",
      "description": "Real-valued number",
      "examples": [1.0, -0.5, 3.14159],
      "constraints": [
        {
          "type": "Finite",
          "description": "Must not be NaN or Infinity"
        }
      ]
    },
    {
      "name": "Integer",
      "description": "Integer-valued number",
      "examples": [1, -5, 42],
      "constraints": [
        {
          "type": "WholeNumber"
        }
      ]
    },
    {
      "name": "Boolean",
      "description": "Logical value",
      "examples": [true, false],
      "constraints": []
    },
    {
      "name": "String",
      "description": "Text value",
      "examples": ["human", "ACGT"],
      "constraints": [
        {
          "type": "NotNull",
          "description": "Must not be null"
        }
      ]
    }
  ],
  
  "restrictedTypes": [
    {
      "name": "PositiveReal",
      "baseType": "Real",
      "description": "Positive real number",
      "examples": [0.1, 1.0, 3.14],
      "constraints": [
        {
          "type": "GreaterThan",
          "value": 0
        },
        {
          "type": "Finite"
        }
      ]
    },
    {
      "name": "NonNegativeReal",
      "baseType": "Real",
      "description": "Non-negative real number",
      "examples": [0.0, 1.0, 42.0],
      "constraints": [
        {
          "type": "GreaterThanEqual",
          "value": 0
        },
        {
          "type": "Finite"
        }
      ]
    },
    {
      "name": "Probability",
      "baseType": "Real",
      "description": "Probability value",
      "examples": [0.0, 0.5, 1.0],
      "constraints": [
        {
          "type": "GreaterThanEqual",
          "value": 0
        },
        {
          "type": "LessThanEqual",
          "value": 1
        },
        {
          "type": "Finite"
        }
      ]
    },
    {
      "name": "PositiveInteger",
      "baseType": "Integer",
      "description": "Positive integer",
      "examples": [1, 2, 42],
      "constraints": [
        {
          "type": "GreaterThan",
          "value": 0
        }
      ]
    }
  ],
  
  "collectionTypes": [
    {
      "name": "Vector",
      "typeParams": ["T"],
      "description": "Ordered collection of values",
      "examples": ["[1.0, 2.0, 3.0]", "[\"human\", \"chimp\"]"],
      "constraints": [
        {
          "type": "ValidElements",
          "description": "All elements must be valid instances of T"
        }
      ]
    },
    {
      "name": "Matrix",
      "typeParams": ["T"],
      "description": "2D array of values",
      "examples": ["[[1.0, 2.0], [3.0, 4.0]]"],
      "constraints": [
        {
          "type": "RectangularShape",
          "description": "All rows must have the same number of columns"
        },
        {
          "type": "ValidElements",
          "description": "All elements must be valid instances of T"
        }
      ]
    },
    {
      "name": "SquareMatrix",
      "typeParams": ["T"],
      "baseType": {"type": "Matrix", "params": ["T"]},
      "description": "Square matrix with equal rows and columns",
      "examples": ["[[1.0, 2.0], [3.0, 4.0]]"],
      "constraints": [
        {
          "type": "SquareShape",
          "description": "Number of rows must equal number of columns"
        }
      ]
    },
    {
      "name": "Map",
      "typeParams": ["K", "V"],
      "description": "Key-value mapping",
      "examples": ["{\"A\": 0.25, \"C\": 0.25}"],
      "constraints": [
        {
          "type": "UniqueKeys"
        }
      ]
    },
    {
      "name": "Set",
      "typeParams": ["T"],
      "description": "Unordered collection with unique elements",
      "examples": ["{\"human\", \"chimp\", \"gorilla\"}"],
      "constraints": [
        {
          "type": "UniqueElements"
        }
      ]
    }
  ],
  
  "typeAliases": [
    {
      "name": "RealVector",
      "target": {"type": "Vector", "params": ["Real"]},
      "description": "Vector of real values"
    },
    {
      "name": "IntVector",
      "target": {"type": "Vector", "params": ["Integer"]},
      "description": "Vector of integer values"
    },
    {
      "name": "StringVector",
      "target": {"type": "Vector", "params": ["String"]},
      "description": "Vector of strings"
    },
    {
      "name": "RealMatrix",
      "target": {"type": "Matrix", "params": ["Real"]},
      "description": "Matrix of real values"
    }
  ],
  
  "specializedTypes": [
    {
      "name": "Simplex",
      "baseType": {"type": "Vector", "params": ["Probability"]},
      "description": "Probability vector with elements that sum to 1.0",
      "examples": ["[0.25, 0.25, 0.25, 0.25]", "[0.1, 0.2, 0.7]"],
      "constraints": [
        {
          "type": "SumTo",
          "value": 1.0,
          "tolerance": 1e-10,
          "description": "Elements must sum to 1.0 within tolerance"
        },
        {
          "type": "NonEmpty",
          "description": "Must contain at least one element"
        }
      ]
    },
    {
      "name": "StochasticMatrix",
      "baseType": {"type": "Matrix", "params": ["Probability"]},
      "description": "Probability transition matrix for discrete-time Markov chains",
      "examples": ["[[0.7, 0.3], [0.2, 0.8]]"],
      "constraints": [
        {
          "type": "RowsSumToOne",
          "tolerance": 1e-10,
          "description": "Each row must sum to 1.0 within tolerance"
        }
      ]
    },
    {
      "name": "QMatrix",
      "baseType": {"type": "SquareMatrix", "params": ["Real"]},
      "description": "Rate matrix for continuous-time Markov chains",
      "examples": [
        "[[-1.0, 0.5, 0.5], [0.3, -0.6, 0.3], [0.2, 0.4, -0.6]]"
      ],
      "constraints": [
        {
          "type": "RowsSumToZero",
          "tolerance": 1e-10,
          "description": "Each row must sum to 0 within tolerance"
        },
        {
          "type": "OffDiagonalsNonNegative",
          "description": "Off-diagonal elements must be non-negative"
        },
        {
          "type": "DiagonalsNonPositive",
          "description": "Diagonal elements must be non-positive"
        }
      ]
    },
    {
      "name": "IndexSet",
      "baseType": {"type": "Set", "params": ["Integer"]},
      "description": "Set of integer indices",
      "constraints": [
        {
          "type": "ElementsNonNegative",
          "description": "All indices must be non-negative"
        }
      ]
    }
  ],
  
  "phylogeneticTypes": [
    {
      "name": "Taxon",
      "description": "Taxonomic unit",
      "properties": [
        {
          "name": "name",
          "type": "String",
          "description": "Name of the taxon",
          "required": true
        }
      ],
      "methods": [
        {
          "name": "equals",
          "params": [{"name": "t", "type": "Taxon"}],
          "returnType": "Boolean",
          "description": "Check if this taxon equals another"
        }
      ]
    },
    {
      "name": "TaxonSet",
      "description": "Collection of taxa",
      "properties": [
        {
          "name": "taxa",
          "type": {"type": "Set", "params": ["Taxon"]},
          "description": "Set of taxa",
          "required": true
        }
      ],
      "methods": [
        {
          "name": "contains",
          "params": [{"name": "t", "type": "Taxon"}],
          "returnType": "Boolean",
          "description": "Check if this set contains a specific taxon"
        }
      ]
    },
    {
      "name": "TreeNode",
      "description": "Node in a phylogenetic tree",
      "properties": [
        {
          "name": "parent",
          "type": "TreeNode",
          "description": "Parent node (null for root)",
          "required": false
        },
        {
          "name": "children",
          "type": {"type": "Vector", "params": ["TreeNode"]},
          "description": "Child nodes",
          "required": true
        }
      ],
      "methods": [
        {
          "name": "isLeaf",
          "params": [],
          "returnType": "Boolean",
          "description": "Check if this node is a leaf (tip)"
        },
        {
          "name": "isRoot",
          "params": [],
          "returnType": "Boolean",
          "description": "Check if this node is the root"
        }
      ]
    },
    {
      "name": "Tree",
      "description": "Phylogenetic tree structure",
      "properties": [
        {
          "name": "root",
          "type": "TreeNode",
          "description": "Root node of the tree",
          "required": true
        },
        {
          "name": "nodes",
          "type": {"type": "Vector", "params": ["TreeNode"]},
          "description": "All nodes in the tree",
          "required": true
        },
        {
          "name": "taxa",
          "type": "TaxonSet",
          "description": "Set of taxa in the tree",
          "required": true
        }
      ],
      "methods": [
        {
          "name": "getNode",
          "params": [{"name": "id", "type": "String"}],
          "returnType": "TreeNode",
          "description": "Get a node by its identifier"
        },
        {
          "name": "getTips",
          "params": [],
          "returnType": {"type": "Vector", "params": ["TreeNode"]},
          "description": "Get all tip nodes"
        }
      ]
    },
    {
      "name": "TimeTree",
      "extends": "Tree",
      "description": "Time-calibrated tree",
      "methods": [
        {
          "name": "getAge",
          "params": [{"name": "node", "type": "TreeNode"}],
          "returnType": "Real",
          "description": "Get the age of a node"
        },
        {
          "name": "getHeight",
          "params": [],
          "returnType": "Real",
          "description": "Get the height (age) of the tree"
        }
      ]
    }
  ],
  
  "sequenceTypes": [
    {
      "name": "Sequence",
      "typeParams": ["A"],
      "description": "Biological sequence",
      "properties": [
        {
          "name": "data",
          "type": {"type": "Vector", "params": ["A"]},
          "description": "Sequence data",
          "required": true
        },
        {
          "name": "taxon",
          "type": "Taxon",
          "description": "Associated taxon",
          "required": true
        }
      ],
      "methods": [
        {
          "name": "length",
          "params": [],
          "returnType": "Integer",
          "description": "Get the length of the sequence"
        }
      ]
    },
    {
      "name": "Alignment",
      "typeParams": ["A"],
      "description": "Multiple sequence alignment",
      "properties": [
        {
          "name": "sequences",
          "type": {"type": "Vector", "params": [{"type": "Sequence", "params": ["A"]}]},
          "description": "Aligned sequences",
          "required": true
        }
      ],
      "methods": [
        {
          "name": "getNSites",
          "params": [],
          "returnType": "Integer",
          "description": "Get the number of sites in the alignment"
        }
      ],
      "constraints": [
        {
          "type": "EqualSequenceLengths",
          "description": "All sequences must have the same length"
        }
      ]
    }
  ],
  
  "alphabets": [
    {
      "name": "Nucleotide",
      "description": "DNA/RNA nucleotide",
      "values": ["A", "C", "G", "T", "U"]
    },
    {
      "name": "AminoAcid",
      "description": "Standard amino acids",
      "values": ["A", "R", "N", "D", "C", "Q", "E", "G", "H", "I", "L", "K", "M", "F", "P", "S", "T", "W", "Y", "V"]
    },
    {
      "name": "Codon",
      "description": "Nucleotide triplet",
      "values": ["AAA", "AAC", "AAG", "AAT", "ACA", "ACC", "ACG", "ACT", "AGA", "AGC", "AGG", "AGT", "ATA", "ATC", "ATG", "ATT", "CAA", "CAC", "CAG", "CAT", "CCA", "CCC", "CCG", "CCT", "CGA", "CGC", "CGG", "CGT", "CTA", "CTC", "CTG", "CTT", "GAA", "GAC", "GAG", "GAT", "GCA", "GCC", "GCG", "GCT", "GGA", "GGC", "GGG", "GGT", "GTA", "GTC", "GTG", "GTT", "TAA", "TAC", "TAG", "TAT", "TCA", "TCC", "TCG", "TCT", "TGA", "TGC", "TGG", "TGT", "TTA", "TTC", "TTG", "TTT"]
    }
  ],
  
  "typeAliasesSequence": [
    {
      "name": "DNASequence",
      "target": {"type": "Sequence", "params": ["Nucleotide"]},
      "description": "DNA sequence"
    },
    {
      "name": "ProteinSequence",
      "target": {"type": "Sequence", "params": ["AminoAcid"]},
      "description": "Protein sequence"
    },
    {
      "name": "CodonSequence",
      "target": {"type": "Sequence", "params": ["Codon"]},
      "description": "Codon sequence"
    },
    {
      "name": "DNAAlignment",
      "target": {"type": "Alignment", "params": ["Nucleotide"]},
      "description": "DNA sequence alignment"
    },
    {
      "name": "ProteinAlignment",
      "target": {"type": "Alignment", "params": ["AminoAcid"]},
      "description": "Protein sequence alignment"
    }
  ],
  
  "conversions": [
    {
      "from": "Integer",
      "to": "Real",
      "implicit": true,
      "description": "Integers are automatically converted to reals when needed"
    },
    {
      "from": "PositiveInteger",
      "to": "PositiveReal",
      "implicit": true,
      "description": "Positive integers are automatically converted to positive reals"
    },
    {
      "from": "PositiveReal",
      "to": "NonNegativeReal",
      "implicit": true,
      "description": "Positive reals are by definition non-negative"
    },
    {
      "from": "Real",
      "to": "Integer",
      "implicit": false,
      "function": "toInteger",
      "description": "Truncates a real to an integer (may lose precision)"
    },
    {
      "from": {"type": "Vector", "params": ["Real"]},
      "to": "Simplex",
      "implicit": false,
      "function": "toSimplex",
      "description": "Normalizes a vector to create a simplex (elements must be non-negative)"
    }
  ],
  
  "validationSettings": {
    "numericalTolerance": 1e-10,
    "description": "Default tolerance for floating-point comparisons in constraint validation"
  }
}